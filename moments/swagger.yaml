swagger: "2.0"
info:
  description: "These are the endpoints associated with 'moments' API."
  version: "1.0.0"
  title: "Swagger - Moments API"
tags:

- name: "moments"
  description: "The APIs associated essentialy with getting the complete moments information, adding a new moment , retreiving a particular moment information, getting the assistant inputs corresponding to a particular moment , updating an existing moment and deleting a moment."

paths:
  /moments:
    get:
      tags:
      - "moments"
      summary: "Finds all the moments information"
      description: "This API fetches all the details of all the moments stored in our database."
      operationId: "findMoments"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Moment"
              
        400:
          description: "Bad request"
        404:
          description: "Service not found"
        500:
          description: "Internal error"
    post:
      tags:
      - "moments"
      summary: "Add a new moment"
      description: "This API takes in the details for the moment and adds a new moment to the database."
      operationId: "newMoment"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Moment object that needs to be stored in the data base"
        required: true
        schema:
            $ref: "#/definitions/Moment"
      responses:
        200:
          description: "successfully added the moment"
        400:
          description: "Bad parameters"
        500:
          description: "Internal error"
          
  /moments/{momentId}:
    get:
      tags:
      - "moments"
      summary: "Retrieve a moment based on the moment Id"
      description: "This API is used t retrieve all the details of a particular moment from the database based on momentId"
      operationId: "retrieveMoment"
      produces:
      - "application/json"
      parameters:
      - name: "momentId"
        in: "path"
        description: "ID of moment to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successfully fetched the moment"
          schema:
            $ref: "#/definitions/Moment"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Moment not found"
        500:
          description: "Internal error"
          
    put:
      tags:
      - "moments"
      summary: "Update a moment based on the moment Id"
      description: "This API takes in the details for a moment and updates the moment in the database."
      operationId: "updateMoment"
      produces:
      - "application/json"
      parameters:
      - name: "momentId"
        in: "path"
        description: "ID of moment to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Assistant inputs object with the values that need to be updated in the data base"
        required: true
        schema:
            $ref: "#/definitions/assistantInputs"
      responses:
        200:
          description: "successfully updated the moment"
        400:
          description: "Bad parameters"
        500:
          description: "Internal error"
        
    delete:
      tags:
      - "moments"
      summary: "Deletes a moment based on the moment Id"
      description: ""
      operationId: "deleteMoment"
      produces:
      - "application/json"
      parameters:
      - name: "momentId"
        in: "path"
        description: "Moment id to delete"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Moment not found"
        500:
          description: "Internal error"
      
  /moments/{momentId}/getSelectedData:
    get:
      tags:
      - "moments"
      summary: "Retrieve the chosen meta data of a particular moment based on the moment Id"
      description: "This API is used to retrieve the chosen meta data field value from the database for a moment based on momentId"
      operationId: "retrieveChosenDataOfAMoment"
      produces:
      - "application/json"
      parameters:
      - name: "momentId"
        in: "path"
        description: "ID of chosen data's moment to be returned"
        required: true
        type: "string"
      responses:
        200:
          description: "successfully fetched the chosen data of the moment"
          schema:
            $ref: "#/definitions/chosenMetadata"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Moment with the mentioned ID not found"
        500:
          description: "Internal error"

  /moments/{momentId}/getWData:
    get:
      tags:
      - "moments"
      summary: "Retrieve the assitant inputs data of a particular moment based on the moment Id"
      description: "This API is used to retrieve the assitant inputs field value from the database for a moment based on momentId"
      operationId: "retrieveAssistantInputsOfAMoment"
      produces:
      - "application/json"
      parameters:
      - name: "momentId"
        in: "path"
        description: "ID of assistant inputs' moment to be returned"
        required: true
        type: "string"
      responses:
        200:
          description: "successfully fetched the assistant inputs of the moment"
          schema:
            $ref: "#/definitions/assistantInputs"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Moment with the mentioned ID not found"
        500:
          description: "Internal error"
          
  /getMomentIDImageURLList:
    get:
      tags:
      - moments
      summary: "Retrieve the list of all the moment ID with corresponding image URL."
      description: "This API is used to retrieve thethe list of json objects containing the moment ID with the corresponding image URL."
      operationId: "retrieveMomentIDImageURLList"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: object
            additionalProperties:
              type: string
            example:
              5a31e077d4f12f62c540c92d: https://drive.google.com/a/stonybrook.edu/file/d/12aXuLFQcsq-6dRwLWJmPGmg10xJBdCqD9g/view?usp=drivesdk
              5a31e1a736b78264a4503959: https://drive.google.com/a/stonybrook.edu/file/d/12aXuLFQcsq-6dAMSGDSFJjcgshkd/view?usp=drivesdk
        400:
          description: "Bad request"
        404:
          description: "Service not found"
        500:
          description: "Internal error"
      
  /MLUpdate/{momentId}:
    put:
      tags:
      - moments
      summary: "Retrieve the list of all the moment ID with corresponding image URL."
      description: "This API is used to retrieve thethe list of json objects containing the moment ID with the corresponding image URL."
      operationId: "updateMLInputs"
      produces:
      - "application/json"
      parameters:
      - name: "momentId"
        in: "path"
        description: "ID of assistant inputs' moment to be returned"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "ML Inputs object for the particular moment"
        required: true
        schema:
            $ref: "#/definitions/MLInputs"
      responses:
        200:
          description: "successfully updated the moment"
        400:
          description: "Bad request"
        404:
          description: "Service not found"
        500:
          description: "Internal error"
          
  /getProcessedMoments:
    get:
      tags:
      - moments
      summary: "Retrieve the list of all the moments where the 'isProcessed' is true."
      description: "This API is used to retrieve the list of moments containing the parameter 'isProcessed' as true."
      operationId: "retrieveIsProcessedMoments"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Moment"
        400:
          description: "Bad request"
        404:
          description: "Service not found"
        500:
          description: "Internal error"
  
  /getPlaceFromLatLong/{lat}/{long}:
    get:
      tags:
      - moments
      summary: "Retrieve the place from latitude and longitude values passed as parameters."
      description: "This API is used to retrieve the json containing the places from the latitude and longitude value."
      operationId: "retrievePlaceFromLatLong"
      produces:
      - "application/json"
      parameters:
      - name: "lat"
        in: "path"
        description: "The latitude value of the location"
        required: true
        type: "integer" 
      - name: "long"
        in: "path"
        description: "The longitude value of the location"
        required: true
        type: "integer" 
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlaceJSON"
        400:
          description: "Bad request"
        404:
          description: "Service not found"
        500:
          description: "Internal error"
    
definitions:

  whoAssistantData:
    type: "object"
    properties:
      faceX1:
        type: "integer"
      faceY1:
        type: "integer"
      faceX2:
        type: "integer"
      faceY2:
        type: "integer"
      faceName:
        type: "string"
      
  assistantInputs:
    type: "object"
    properties:
      what:
        type: "string"
      where:
        type: "string"
      why:
        type: "string"
      when:
        type: "string"
      who:
        type: "array"
        items:
          $ref: "#/definitions/whoAssistantData"
      lastModified:
        type: "string"
    xml:
      name: "assistantInputs"
      
  
  extraObj:
    type: "object"
    properties:
      googlePlaceId:
        type: "string"
      confidence:
        type: "string"
      premise:
        type: "string"
      subpremise:
        type: "string"
      neighborhood:
        type: "string"
      establishment:
        type: "string"
  
  
  adminLevelObj:
    type: "object"
    properties:
      level2long:
        type: "string"
      level2short:
        type: "string"
      level1long:
        type: "string"
      level1short:
        type: "string"
  
  
  PlaceJSON:
    type: "object"
    properties:
      formattedAddress:
        type: "string"
      latitude:
        type: "string"
      longitude:
        type: "string"
      extra:
        $ref: "#/definitions/extraObj"
      administrativelevels:
        $ref: "#/definitions/adminLevelObj"
      streetNumber:
        type: "string"
      streetname:
        type: "string"
      city:
        type: "string"
      country:
        type: "string"
      countryCode:  
        type: "string"
      zipCode:
        type: "string"
      provider:
        type: "string"
    
  
  MLInputs:
    type: "object"
    properties:
      what:
        type: "array"
        items: 
          type: "string"
      where:
        type: "string"
      why:
        type: "array"
        items:
          type: "string"
      when:
        type: "string"
      who:
        type: "array"
        items:
          type: "string"
      lastModified:
        type: "string"
    xml:
      name: "MLInputs"
      
  userDetails:
    type: "object"
    properties: 
      kind:
        type: "string"
      displayName:
        type: "string"
      photoLink:
        type: "string"
      me:
        type: "boolean"
      permissionId:
        type: "string"
      emailAddress: 
        type: "string"
    xml:
      name: "ownerDetails"
      
  capabilities:
    type: "object"
    properties:
      canAddChildren:
        type: "boolean"
      canChangeViewersCanCopyContent:
        type: "boolean"
      canComment:
        type: "boolean"
      canCopy:
        type: "boolean"
      canDelete:
        type: "boolean"
      canDownload:
        type: "boolean"
      canEdit:
        type: "boolean"
      canListChildren:
        type: "boolean"
      canMoveItemIntoTeamDrive:
        type: "boolean"
      canReadRevisions:
        type: "boolean"
      canRemoveChildren:
        type: "boolean"
      canRename:
        type: "boolean"
      canShare:
        type: "boolean"
      canTrash:
        type: "boolean"
      canUntrash:
        type: "boolean"
    xml:
      name: "capabilities"
      
  permissions:
    type: "object"
    properties: 
      kind:
        type: "string"
      id:
        type: "string"
      type:
        type: "string"
      emailAddress:
        type: "string"
      role:
        type: "string"
      photoLink:
        type: "string"
      deleted: 
        type: "boolean"
    xml:
      name: "permissions"
    
  imageMetadata:
    type: "object"
    properties:
      width:
        type: "integer"
      height:
        type: "integer"
      rotation:
        type: "integer"
      colorSpace:
        type: "string"
    xml:
      name: "imageMetadata"
      
  rawMetadata:
    type: "object"
    properties:
      service_type:
        type: "string"
      kind:
        type: "string"
      id:
        type: "string"
      name:
        type: "string"
      mimeType:
        type: "string"
      description:
        type: "string"
      starred:
        type: "boolean"
      trashed:
        type: "boolean"
      explicitlyTrashed:
        type: "boolean"
      parents:
        type: "array"
        items: 
          type: "string"
      spaces:
        type: "array"
        items: 
          type: "string"
      version:
        type: "string"
      webContentLink:
        type: "string"
      webViewLink:
        type: "string"
      iconLink:
        type: "string"
      hasThumbnail:
        type: "boolean"
      thumbnailLink:
        type: "string" 
      thumbnailVersion:
        type: "string"
      createdTime:
        type: "string"
      modifiedTime:
        type: "string"
      modifiedByMeTime:
        type: "string"
      owners:
        $ref: "#/definitions/userDetails"
      lastModifyingUser:
        $ref: "#/definitions/userDetails"
      shared:
        type: "boolean"
      ownedByMe:
        type: "boolean"
      capabilities:
        $ref: "#/definitions/capabilities"
      viewersCanCopyContent:
        type: "boolean"
      writersCanShare:
        type: "boolean"
      permissions:
        type: "array"
        items:
          $ref: "#/definitions/permissions"
      permissionIds:
        type: "array"
        items:
          type: "string"
      originalFilename:
        type: "string"
      fullFileExtension:
        type: "string"
      fileExtension:
        type: "string"
      md5Checksum:
        type: "string"
      size:
        type: "string"
      quotaBytesUsed:
        type: "string"
      headRevisionId:
        type: "string"
      imageMediaMetadata:
        $ref: "#/definitions/imageMetadata"
      isAppAuthorized:
        type: "boolean"
    xml:
      name: "rawMetadata"
  
  
  chosenMetadata:
    type: "object"
    properties:
      canDownload:
        type: "boolean"
      thumbnail_image:
        type: "string"
      thumbnail_mimetype:
        type: "string"
      createdTime:
        type: "string"
      description:
        type: "string"
      fullFileExtension:
        type: "string"
      hasThumbnail:
        type: "boolean"
      id:
        type: "string"
      height: 
        type: "integer"
      time:
        type: "string"
      width:
        type: "integer"
      location_altitude:
        type: "string"
      location_latitude: 
        type: "string"
      location_longitude:
        type: "string"
      md5Checksum:
        type: "string"
      mimeType:
        type: "string"
      name:
        type: "string"
      originalFilename:
        type: "string"
      owners_displayName:
        type: "string"
      owners_emailAddress:
        type: "string"
      sharedWithMeTime:
        type: "string"
      size:
        type: "integer"
      webContentLink:
        type: "string"
      webViewLink:
        type: "string"
    xml:
      name: "chosenMetadata"
      
  Moment:
    type: "object"
    required:
    - "momentID"
    properties:
      momentID:
        type: "string"
      momentIndex:
        type: "string"      
      assistantInputs:
        $ref: "#/definitions/assistantInputs"
      MLInputs:
        $ref: "#/definitions/MLInputs"
      Rawmetadata:
        $ref: "#/definitions/rawMetadata"
      chosenMetadata: 
        $ref: "#/definitions/chosenMetadata"
      momentSource: 
        type: "string"
      isProcessed: 
        type: "boolean"
      initialTimeStamp: 
        type: "string"
        format: mm-dd-YYYY
      isAccessible:
        type: "boolean"
      isTrashed:
        type: "boolean"
      imageURL:
        type: "string"
    xml:
      name: "Moment"
  
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
